name: Publish to PyPI

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v1.2.3, etc.
  workflow_dispatch:  # Allows manual triggering

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run tests
      run: |
        pytest tests/ --cov=datadagger --cov-report=xml
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build:
    name: Build Package
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  publish:
    name: Publish to PyPI
    needs: [test, build]
    runs-on: ubuntu-latest
    environment: 
      name: pypi
      url: https://pypi.org/p/datadagger
    permissions:
      id-token: write  # For trusted publishing
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        verbose: true

  create-release:
    name: Create GitHub Release
    needs: [test, build, publish]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Extract tag name
      run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.TAG_NAME }}
        name: Release ${{ env.TAG_NAME }}
        body: |
          ## Changes in ${{ env.TAG_NAME }}
          
          ðŸš€ **DataDagger OSINT Tool** - New release available on PyPI!
          
          ### Installation
          ```bash
          pip install datadagger==${{ env.TAG_NAME }}
          ```
          
          ### What's Changed
          - Check the [CHANGELOG.md](CHANGELOG.md) for detailed changes
          
          ### Quick Start
          ```bash
          datadagger --help
          ```
          
          **Full Changelog**: https://github.com/khushiyant/datadagger/compare/${{ env.TAG_NAME }}
        files: |
          dist/*
        draft: false
        prerelease: false
